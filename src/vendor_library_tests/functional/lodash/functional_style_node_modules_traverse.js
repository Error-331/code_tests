'use strict';

// external imports
const {join} = require('path');

const {stubTrue, equals, cond, curry} = require('lodash/fp');
const jsonfile = require('jsonfile');
const cp = require('child_process');

// local imports
const {
    INSERT_NEW_MODULE_NAME_CHILD_PROCESS,
    SELECT_MODULE_CHILD_PROCESS_CHILD_PROCESS,
    SELECT_INSERT_MODULE_NAME_CHILD_PROCESS,

    INSERT_NEW_MODULE_VERSION_CHILD_PROCESS,
    SELECT_MODULE_BY_NAME_ID_AND_VERSION_CHILD_PROCESS,
    SELECT_INSERT_MODULE_VERSION_CHILD_PROCESS,

    INSERT_NEW_MODULE_LOCATION_CHILD_PROCESS,
    SELECT_LOCATION_BY_PATH_CHILD_PROCESS,
    SELECT_LOCATION_BY_NAME_ID_AND_VERSION_CHILD_PROCESS,
    SELECT_INSERT_MODULE_LOCATION_CHILD_PROCESS,

    INSERT_NEW_MODULE_LOCATION_CONNECTION_CHILD_PROCESS,

    INSERT_NEW_PATH_CHILD_PROCESS,
    SELECT_TRAVERSED_PATH_BY_PATH_CHILD_PROCESS,
} = require('./constants/child_process_db_constants');

const {generateSync} = require('./helpers/promise_sync_helpers');
const {getDBEffects, getModulesLocationsQueryWrappers} = require('./helpers/db_helpers');

const {getDBType, setJSMemoryDBType} = require('./effects/app_effects');
const {extractAndSaveModuleData} = require('./effects/modules_tree_effects');

// functions definition
const logDirectory =  curry((logPrefix, directoryPath) => {
    console.log(`${logPrefix}${directoryPath}`);
    return directoryPath;
});

// module implementation
const pathToRootNodeModules1 = '/home/segei/projects/code_tests';
//const pathToRootNodeModules = '/home/segei/Downloads';
 //const pathToRootNodeModules = '/home/brightsign/projects/fatback/';
const pathToRootNodeModules2 = '/home/brightsign/projects/fatback/bsCore';
// const pathToRootNodeModules = '/home/brightsign/projects/fatback/node_modules/bacon/node_modules/@brightsign/ba-dialog-ui/node_modules/@brightsign/ba-context-model/node_modules/@brightsign/bs-playlist-dm/node_modules/@brightsign/bscore/';


setJSMemoryDBType();

const b = generateSync(function* () {










    console.log('Open DB connection...');
    const dbType = getDBType();
    const dbConnection = yield getDBEffects(dbType).openConnectionToDB();
    yield getDBEffects(dbType).prepareDatabase(dbConnection);


    const n = cp.fork(`${__dirname}/child_proc_test.js`);

    n.on('message', (childMessage) => {
        console.log('PARENT got message:', childMessage);

        const {name, type, data} = childMessage;

        const taskPromise = cond([
            [equals(SELECT_LOCATION_BY_PATH_CHILD_PROCESS), () =>
                getModulesLocationsQueryWrappers(dbType).selectLocationByPath(dbConnection, data.usrPath)]
        ])(type);

        taskPromise.then((taskResult) => {
            n.send({name, data: taskResult})
        })
    });


    /*const resultingJSON = yield getDBEffects(dbType).exportToJSON(dbConnection);
    console.log(resultingJSON);

    jsonfile.writeFile('deps.json', resultingJSON, { spaces: 2 }, function (err) {
        if (err) console.error(err)
    });*/

  /*  console.log('Closing DB connection...');
    yield getDBEffects(dbType).closeConnectionToDB(dbConnection);*/
});

b();

