'use strict';

// external imports

// local imports
const {generateSync} = require('./helpers/promise_sync_helpers');
const {getDBEffects} = require('./helpers/db_helpers');
const {getReportQueryWrappers} = require('./helpers/db_helpers');
const {determineMaxVersionFromRanges} = require('./helpers/semver_helpers');

const {setMasterProcessType} = require('./effects/process_meta_effects');
const {getDBType, setJSMemoryDBType} = require('./effects/app_effects');

const {executeChildProcessTask} = require('./effects/master_process_effects');
const {initModulesTraversingProcessQueue} = require('./effects/child_process_queue_effects');

const {writJSONToFile} = require('./effects/fs_effects');
const {populateNPMModulesVersions, populateMissingNPMModulesVersions} = require('./effects/db_effects');

const {installPackagesForRootModules} = require('./effects/modules_installation_effects');

// functions definition

// module implementation
//const pathToRootNodeModules1 = '/home/segei/projects/code_tests';
//const pathToRootNodeModules = '/home/segei/Downloads';
 //const pathToRootNodeModules = '/home/brightsign/projects/fatback/';
//const pathToRootNodeModules2 = '/home/brightsign/projects/fatback/bsCore';
// const pathToRootNodeModules = '/home/brightsign/projects/fatback/node_modules/bacon/node_modules/@brightsign/ba-dialog-ui/node_modules/@brightsign/ba-context-model/node_modules/@brightsign/bs-playlist-dm/node_modules/@brightsign/bscore/';


setMasterProcessType();
setJSMemoryDBType();

const b = generateSync(function* () {


    console.log('Open DB connection...');
    const dbType = getDBType();
    const dbConnection = yield getDBEffects(dbType).openConnectionToDB();
    yield getDBEffects(dbType).prepareDatabase(dbConnection);


    const pathsToTraverse = [
        /*"/home/brightsign/projects/fatback/bacon",
        "/home/brightsign/projects/fatback/bs-device-list-ui",
        "/home/brightsign/projects/fatback/bs-remote-dws",
        "/home/brightsign/projects/fatback/ba-presentation-edit-ui",
        "/home/brightsign/projects/fatback/ba-live-media-feed-edit-ui",
        "/home/brightsign/projects/fatback/ba-live-data-feed-edit-ui",
        "/home/brightsign/projects/fatback/ba-dynamic-playlist-edit-ui",
        "/home/brightsign/projects/fatback/ba-transfer-progress",
        "/home/brightsign/projects/fatback/ba-application-preference-ui",
        "/home/brightsign/projects/fatback/bs-device-setup-list-ui",
        "/home/brightsign/projects/fatback/bs-device-provision-ui",
        "/home/brightsign/projects/fatback/bs-user-management-ui",
        "/home/brightsign/projects/fatback/bs-permission-management-ui",
        "/home/brightsign/projects/fatback/bs-redux-enhancer",
        "/home/brightsign/projects/fatback/ba-dialog-ui",
        "/home/brightsign/projects/fatback/ba-notification-ui",
        "/home/brightsign/projects/fatback/bs-ts-components",
        "/home/brightsign/projects/fatback/bs-ts-widgets",
        "/home/brightsign/projects/fatback/bs-widgets",
        "/home/brightsign/projects/fatback/bacon-theme",
        "/home/brightsign/projects/fatback/ba-context-model",
        "/home/brightsign/projects/fatback/ba-schedule",
        "/home/brightsign/projects/fatback/ba-ipc-manager",
        "/home/brightsign/projects/fatback/bs-dws-manager",
        "/home/brightsign/projects/fatback/ba-uw-dm",
        "/home/brightsign/projects/fatback/ba-uw-manager",
        "/home/brightsign/projects/fatback/bs-autoplay-generator",
        "/home/brightsign/projects/fatback/bs-content-manager-store",
        "/home/brightsign/projects/fatback/bs-content-manager",
        "/home/brightsign/projects/fatback/bs-device-artifacts",
        "/home/brightsign/projects/fatback/bs-device-setup",
        "/home/brightsign/projects/fatback/bs-bpf-converter",
        "/home/brightsign/projects/fatback/bs-link-resolver",
        "/home/brightsign/projects/fatback/bs-permission-management-dm",
        "/home/brightsign/projects/fatback/bs-data-feed-dm",
        "/home/brightsign/projects/fatback/bs-playlist-dm",
        "/home/brightsign/projects/fatback/bs-publisher",
        "/home/brightsign/projects/fatback/bs-task-manager",
        "/home/brightsign/projects/fatback/bsDataModel",
        "/home/brightsign/projects/fatback/bs-lws-connector",*/
        //"/home/brightsign/projects/fatback/bsnConnector",
       // "/home/brightsign/projects/fatback/fsConnector",
      //  "/home/brightsign/projects/fatback/fsMetadata",
        //"/home/brightsign/projects/fatback/bacon-core",
       // "/home/brightsign/projects/fatback/bs-configurator",
        //"/home/brightsign/projects/fatback/bsCore",
        //'/home/segei/projects/code_tests'


        //  '/home/segei/projects/test_fatback/bsCore',
        /// '/home/segei/projects/test_fatback/bsnConnector',

        '/home/sergei/Projects/test_fatback/bsCore',
        '/home/sergei/Projects/test_fatback/bsnConnector',
    ];



     //const b = '1.2.3 - 2.3.4 ||   >=3.5.6  || 2.5.6 -   2.6.0 | >=   1.2.3 <   2.4.0 | 5.0.0';
    //const b = '>=2.1.0 || >=2.1.0   -   dev.2 || >=2.2.0-dev || >=2.3.0-dev || >=2.4.0-dev || >=2.5.0-dev || >=2.6.0-dev || >=2.7.0-dev || >=2.8.0-dev || >=2.9.0-dev || >= 3.0.0-dev || >= 3.1.0-dev';
    //const g = RegExp('(\\<|\\>|\\<\\=|\\>\\=|\\=|\\~|\\^)(\\ )*(\\*|[0-9]|x|X)', 'g');

   /*console.log(b.replace(
        g,
        (match, part1, part2, part3) =>  [part1, part3].join('')
    ));*/

  // const {stubTrue, split, replace, identity, slice, over, map, equals, pipe, nth, concat, spread, takeWhile, gte, gt, range, size, cond, times, constant} = require('lodash/fp');
// https://stackoverflow.com/questions/10972176/find-the-version-of-an-installed-npm-package


   //console.log(prepareSemverVersion('6.7.10', '5.3.2'));

   // console.log(determineMaxVersionFromRanges(b));

   // const c = RegExp('([^\\|])(\\|)([^\\|])', 'g');
    //const b = 'v | 3 | 5 ||7||9 43 | 4   |    345 |^88 ||~ ||^ |~';




    initModulesTraversingProcessQueue(executeChildProcessTask(dbType, dbConnection), pathsToTraverse)
        .then(() => getDBEffects(dbType).importFromJSON(dbConnection,`${__dirname}/../../../../test.json`))
        .then(() => getDBEffects(dbType).importNPMModulesVersionsFromJSON(dbConnection, `${__dirname}/../../../../npm_modules_versions.json`))
        .then(() => populateMissingNPMModulesVersions(dbConnection))



        //.then(() => populateNPMModulesVersions(dbConnection))
        //.then(() => getDBEffects(dbType).exportNPMModulesVersionsToJSON(dbConnection))
        //.then(exportedJSON => writJSONToFile(`${__dirname}/../../../../npm_modules_versions.json`, exportedJSON))
        /*.then(() => getDBEffects(dbType).exportToJSON(dbConnection))
        .then(exportedJSON => writJSONToFile(`${__dirname}/../../../../test.json`, exportedJSON))
        .then(() => {
            populateNPMModulesVersions(dbConnection)
                .then(() => getDBEffects(dbType).exportNPMModulesVersionsToJSON(dbConnection))
                .then(exportedJSON => writJSONToFile(`${__dirname}/../../../../npm_modules_versions.json`, exportedJSON))


            getDBEffects(dbType)
                .importFromJSON(dbConnection,`${__dirname}/../../../../test.json`).then(() => {






                getReportQueryWrappers(dbType).selectRootModulesFullData(dbConnection).then((data) => {

                   // installPackagesForRootModules(dbConnection);

                    //console.log('fs', data);
                })
            });
        })*/

// '>=2.1.0 || >=2.1.0-dev || >=2.2.0-dev || >=2.3.0-dev || >=2.4.0-dev || >=2.5.0-dev || >=2.6.0-dev || >=2.7.0-dev || >=2.8.0-dev || >=2.9.0-dev || >= 3.0.0-dev || >= 3.1.0-dev'


  /*  getDBEffects(dbType)
        .importFromJSON(dbConnection,`${__dirname}/../../../../test.json`).then(() => {
        getReportQueryWrappers(dbType).selectRootModulesFullData(dbConnection).then((data) => {
            console.log('fs', data);
        })
    });*/


    ////




    /*  console.log('Closing DB connection...');
      yield getDBEffects(dbType).closeConnectionToDB(dbConnection);*/


    // traverse each root module
    // // get all child location connections
    // // prepare lists of all dependencies groups
    // // install prod and dev modules
    // // install peer modules at root dir
    // // link peer modules

});

b();

