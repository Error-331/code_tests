// external imports
const {resolve} = require('path');
const {constants, readdirSync, accessSync} = require('fs');

const {constant, identity, stubTrue, isEmpty, isNil, eq, cond, curry, each, pipe, concat, intersection, contains} = require('lodash/fp');

// constants definition
const SPECIAL_DIRECTORY_NAMES = ['.', '..'];
const DIRECTORIES_TO_EXCLUDE = ['.bin', '@babel'];

const EXCEPTION_DIRECTORY_NAMES = concat(SPECIAL_DIRECTORY_NAMES, DIRECTORIES_TO_EXCLUDE);

// functions definition
const isException = curry((exceptions, value) => contains(value, exceptions));
const isExceptionDirName = isException(EXCEPTION_DIRECTORY_NAMES);

const isEntityHasAccess = curry((accessType, entity) => {
    try {
        accessSync(entity, accessType);
        return true;
    } catch(error) {
        return false;
    }
});

const isEntityReadable = isEntityHasAccess(constants.R_OK);

const containsExceptions = curry((exceptions, data) => !isEmpty(intersection(exceptions, data)));

const combinePaths = curry((firstPath, secondPath) => resolve(firstPath, secondPath));

const traverseDirectory = curry((callBack = () => {}, rootDirPath) => {
    each(callBack, readdirSync(rootDirPath));
});

const traverseDirectorySafe = curry((callBack, rootDirPath) => {
    const filterFunc = cond([
        [isExceptionDirName, constant(null)],
        [stubTrue, callBack]
    ]);

    return traverseDirectory(filterFunc, rootDirPath)
});

const traverseDirectorySafe1 = curry((callBack, rootDirPath) => {
    console.log('---', rootDirPath);
pipe(callBack, traverseDirectorySafe(traverseDirectorySafe1(callBack)))(rootDirPath);


});

//

const justNull = cond([
    [isNil, constant(null)],
    [eq(false), constant(null)],
    [stubTrue, identity]
]);

const justNullBy = curry((callBack, value) => {
    return cond([
        [isNil, constant(null)],
        [stubTrue, constant(value)]
    ])(justNull(callBack(value)));

    return justNull(callBack(value));
});

// module implementation
const pathToRootNodeModules = '/extra_storage/projects/code_tests/node_modules';
const b1 = pipe(combinePaths('/extra_storage/projects/code_tests/node_modules'), justNullBy(isEntityReadable), (a) => {console.log(a); return a;});

traverseDirectorySafe1(b1, pathToRootNodeModules);

// get directory list from current node modules
// exclude special directories ('.', '..')
// exclude additional directories (like '.bin')