'use strict';

// external imports
const {join} = require('path');

const {stubTrue, cond, constant, curry} = require('lodash/fp');
const jsonfile = require('jsonfile');

// local imports
const {removeLastPathEntity} = require('./helpers/path_helpers');
const {generateSync} = require('./helpers/promise_sync_helpers');
const {getDBEffects, getPathsTraversedQueryWrappers} = require('./helpers/db_helpers');

const {getDBType, setJSMemoryDBType} = require('./effects/app_effects');
const {isPathAlreadyTraversed} = require('./effects/db_effects');
const {traverseDirectoryRecursive, traverseNodeModulesDirectory} = require('./effects/fs_effects');
const {handleModuleData} = require('./effects/modules_tree_effects');

// functions definition
const logDirectory =  curry((logPrefix, directoryPath) => {
    console.log(`${logPrefix}${directoryPath}`);
    return directoryPath;
});

// module implementation
const pathToRootNodeModules = '/home/segei/projects/code_tests';
//const pathToRootNodeModules = '/home/segei/Downloads';
 //const pathToRootNodeModules = '/home/brightsign/projects/fatback/';
//const pathToRootNodeModules = '/home/brightsign/projects/fatback/bsCore';
// const pathToRootNodeModules = '/home/brightsign/projects/fatback/node_modules/bacon/node_modules/@brightsign/ba-dialog-ui/node_modules/@brightsign/ba-context-model/node_modules/@brightsign/bs-playlist-dm/node_modules/@brightsign/bscore/';

const addNodeModulesDir = path => join(path, '/node_modules');

const nodeModulesTreeFilter = curry((path, transformedPath) => {
    const originalPathFilter = cond([
        [isExclusionDirPath, constant(true)],
        [stubTrue, constant(false)],
    ])(path);

    const transformedPathFilter = cond([
        [stubTrue, constant(false)],
    ])(transformedPath);

    return originalPathFilter || transformedPathFilter;
});

setJSMemoryDBType();

const b = generateSync(function* () {
    console.log('Open DB connection...');
    const dbType = getDBType();

    const dbConnection = yield getDBEffects(dbType).openConnectionToDB();

    yield getDBEffects(dbType).prepareDatabase(dbConnection);

    //
    yield handleModuleData(dbConnection, '', pathToRootNodeModules, '', []);

    const result = yield traverseDirectoryRecursive(
        handleModuleData(dbConnection),
        traverseNodeModulesDirectory,

        generateSync(function* (path) {
            const isPathVisited = yield isPathAlreadyTraversed(dbConnection, path);

            if (isPathVisited === false) {
                let preparedPath = removeLastPathEntity(path);
                yield getPathsTraversedQueryWrappers(dbType).insertNewPath(dbConnection, preparedPath);
            }

            yield isPathVisited;
        }),

        addNodeModulesDir,
        pathToRootNodeModules,
    );


    const resultingJSON = yield getDBEffects(dbType).exportToJSON(dbConnection);
    console.log(resultingJSON);

    jsonfile.writeFile('deps.json', resultingJSON, { spaces: 2 }, function (err) {
        if (err) console.error(err)
    });

    console.log('Closing DB connection...');
    yield getDBEffects(dbType).closeConnectionToDB(dbConnection);
});

b();

