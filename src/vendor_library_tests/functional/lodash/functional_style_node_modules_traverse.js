'use strict';

// external imports
const {join} = require('path');
const semver = require('semver');
const chalk = require('chalk');

const {equals, cond, curry} = require('lodash/fp');
const cp = require('child_process');

// local imports
const {
    MASTER_SET_NAME_COMMAND_MESSAGE_TYPE,
    MASTER_SET_PATH_TO_MODULES_COMMAND_MESSAGE_TYPE,
    MASTER_START_MODULE_TRAVERSE_COMMAND_MESSAGE_TYPE,
    MASTER_DATA_MESSAGE_TYPE,
} = require('./constants/master_process_constants');

const {
    CHILD_READY_FOR_MODULE_TRAVERSING_MESSAGE_TYPE,
    CHILD_FINISH_WITH_MODULE_TRAVERSING_MESSAGE_TYPE,
    CHILD_DELEGATE_TASK_MESSAGE_TYPE,
} = require('./constants/child_process_constants');

const {generateSync} = require('./helpers/promise_sync_helpers');
const {getDBEffects, getModulesLocationsQueryWrappers} = require('./helpers/db_helpers');

const {getDBType, setJSMemoryDBType} = require('./effects/app_effects');
const {extractAndSaveModuleData} = require('./effects/modules_tree_effects');

const {executeChildProcessTask} = require('./effects/master_process_effects');

// functions definition
const logDirectory =  curry((logPrefix, directoryPath) => {
    console.log(`${logPrefix}${directoryPath}`);
    return directoryPath;
});






// module implementation
//const pathToRootNodeModules1 = '/home/segei/projects/code_tests';
//const pathToRootNodeModules = '/home/segei/Downloads';
 //const pathToRootNodeModules = '/home/brightsign/projects/fatback/';
//const pathToRootNodeModules2 = '/home/brightsign/projects/fatback/bsCore';
// const pathToRootNodeModules = '/home/brightsign/projects/fatback/node_modules/bacon/node_modules/@brightsign/ba-dialog-ui/node_modules/@brightsign/ba-context-model/node_modules/@brightsign/bs-playlist-dm/node_modules/@brightsign/bscore/';

const pathToRootNodeModules1 = '/home/luda/projects/fatback/bsCore';
const pathToRootNodeModules2 = '/home/luda/projects/fatback/bsnConnector';


setJSMemoryDBType();

const b = generateSync(function* () {


    console.log('Open DB connection...');
    const dbType = getDBType();
    const dbConnection = yield getDBEffects(dbType).openConnectionToDB();
    yield getDBEffects(dbType).prepareDatabase(dbConnection);

    const n = cp.fork(`${__dirname}/child_proc_test.js`);

    n.on('message', (childMessage) => {
        const {name, type, taskType, data} = childMessage;
        console.log(
            chalk.bgWhite(chalk.gray(` MASTER `)),
            chalk.white(`Incoming message (name: '${name}', type: '${type}')`)
        );

        cond([
            [equals(CHILD_READY_FOR_MODULE_TRAVERSING_MESSAGE_TYPE), () => n.send({type: MASTER_START_MODULE_TRAVERSE_COMMAND_MESSAGE_TYPE})],
            [equals(CHILD_FINISH_WITH_MODULE_TRAVERSING_MESSAGE_TYPE), () => {

                getDBEffects(dbType).exportToJSON(dbConnection);
            }],

            [equals(CHILD_DELEGATE_TASK_MESSAGE_TYPE), () => {
                const taskPromise = executeChildProcessTask(dbType, dbConnection, taskType, data);

                taskPromise.then((taskResult) => {
                    n.send({name, type: MASTER_DATA_MESSAGE_TYPE, data: taskResult})
                })
            }],
        ])(type);

    });

    n.send({type: MASTER_SET_NAME_COMMAND_MESSAGE_TYPE, data: 'child_1'});
    n.send({type: MASTER_SET_PATH_TO_MODULES_COMMAND_MESSAGE_TYPE, data: pathToRootNodeModules1});





    ////




    /*  console.log('Closing DB connection...');
      yield getDBEffects(dbType).closeConnectionToDB(dbConnection);*/
});

b();

