'use strict';

// external imports
const {join} = require('path');


const {stubTrue, cond, constant, defaultTo, keys, curry} = require('lodash/fp');

const sqlite = require('sqlite');

// local imports
const {DIRECTORIES_TO_EXCLUDE} = require('./constants/exclusion_constants');

const {isExclusion, isEntityNotExists} = require('./helpers/validation_helpers');
const {traverseDirectoryRecursive, traverseNodeModulesDirectory} = require('./helpers/fs_traverse_helpers');
const {joinTwoPaths} = require('./helpers/path_helpers');

const {generateSync} = require('./helpers/promise_sync_helpers');

const {prepareDatabase, insertModuleData, insertDependencyListToDB} = require('./effects/db_effects');
const {readPackageJSON} = require('./effects/fs_effects');

// functions definition


const openConnectionToDB = () => sqlite.open('test.sqlite');
const closeConnectionToDB = (dbConnection) => dbConnection.close();




const logDirectory =  curry((logPrefix, directoryPath) => {
    console.log(`${logPrefix}${directoryPath}`);
    return directoryPath;
});

// module implementation
const pathToRootNodeModules = '/home/segei/projects/code_tests';
//const pathToRootNodeModules = '/home/segei/Downloads';
//const pathToRootNodeModules = '/home/brightsign/projects/fatback/';
//const pathToRootNodeModules = '/home/brightsign/projects/fatback/';
// const pathToRootNodeModules = '/home/brightsign/projects/fatback/node_modules/bacon/node_modules/@brightsign/ba-dialog-ui/node_modules/@brightsign/ba-context-model/node_modules/@brightsign/bs-playlist-dm/node_modules/@brightsign/bscore/';

const addNodeModulesDir = path => join(path, '/node_modules');

const nodeModulesTreeFilter = curry((path, transformedPath) => {
    const originalPathFilter = cond([
        [isExclusionDirPath, constant(true)],
        [stubTrue, constant(false)],
    ])(path);

    const transformedPathFilter = cond([
        [stubTrue, constant(false)],
    ])(transformedPath);

    return originalPathFilter || transformedPathFilter;
});

const depMap = new Map();
const depDepMap = new Map();
const peerDepMap = new Map();

const saveDepsStat = curry((packageName, pathToPackage, dependencies, devDependencies, peerDependencies) => {
 // deps peer

const c = (dependencies, mapObj) => {
    for (let dependency in dependencies) {
        const dependencyVersion = dependencies[dependency];

        if (mapObj.has(dependency)) {
            mapObj.get(dependency).get('versions').add(dependencyVersion);

            if (!mapObj.get(dependency).get('packages').has(dependencyVersion)) {
                mapObj.get(dependency).get('packages').set(dependencyVersion, {packageName, pathToPackage});
            }

        } else {
            const b = new Map();
            b.set(dependencyVersion, {packageName, pathToPackage});

            const c = new Map();
            c.set('packages', b);
            c.set('versions', new Set([dependencyVersion]));

            mapObj.set(dependency, c);
        }
    }
}

c(dependencies, depMap);
c(devDependencies, depDepMap);
c(peerDependencies, peerDepMap);

});

const userCallback = curry((dbConnection, originalPath, pathToModule, packageDirName, installedChildNodeModules) => {
    console.log('---', originalPath, pathToModule, packageDirName);

    return generateSync(function* () {
        // apply filter to directory name
        if (isExclusion(DIRECTORIES_TO_EXCLUDE, packageDirName)) {
            return;
        }

        // read package.json
        const currentPackageJSON = readPackageJSON(joinTwoPaths(pathToModule, packageDirName));

        // extract name and version of the current module
        const {name, version} = currentPackageJSON;

        // insert current module data to DB
        const currentModuleLocationID = yield insertModuleData(dbConnection, name, version, joinTwoPaths(pathToModule, packageDirName), null);

        // extract module dependencies lists
        let {dependencies, devDependencies, peerDependencies} = currentPackageJSON;

        // insert dependencies data from package.json into DB
        yield insertDependencyListToDB(dbConnection, dependencies, pathToModule, currentModuleLocationID, 'dependency');
        yield insertDependencyListToDB(dbConnection, devDependencies, pathToModule, currentModuleLocationID, 'devDependencies');
        yield insertDependencyListToDB(dbConnection, peerDependencies, pathToModule, currentModuleLocationID, 'peerDependencies');
    })();
});



const b = generateSync(function* () {
    console.log('Open DB connection...');
    const dbConnection = yield openConnectionToDB();

    yield prepareDatabase(dbConnection);

    //
    yield userCallback(dbConnection, '', pathToRootNodeModules, '', []);

    /*const result = yield traverseDirectoryRecursive(
        userCallback(dbConnection),
        traverseNodeModulesDirectory,
        addNodeModulesDir,
        pathToRootNodeModules,
    );*/

    console.log('Closing DB connection...');
    yield closeConnectionToDB(dbConnection);




});

b();



/*jsonfile.writeFile('./deps_tree.json', result, { spaces: 2 }, function (err) {
    if (err) console.error(err)
});*/



//console.log(sqlite.open('test.sqlite'));

//let versions = [...peerDepMap.get('react').get('versions')];
//versions = ['14.0.0', '16.0.0']
//console.log(semver.maxSatisfying(versions, '<=15.0.0'));

//console.log(depMap);

